
// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using System.IO;
using System.Linq;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using ConfigurationHelper1.Models;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Configuration;

#nullable disable

namespace ConfigurationHelper1.Data
{
    public partial class NorthContext : DbContext
    {
        public NorthContext()
        {
        }

        public NorthContext(DbContextOptions<NorthContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Categories> Categories { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer(GetConnectionString());
            }
        }

        /// <summary>
        /// https://www.benday.com/2017/12/20/ef-core-asp-net-core-read-connections-strings-from-environment-variables/
        /// https://stackoverflow.com/questions/46364293/automatically-set-appsettings-json-for-dev-and-release-environments-in-asp-net-c
        /// </summary>
        /// <returns></returns>
        private static string BuildConnection()
        {

            IConfigurationBuilder builder = new ConfigurationBuilder()
                //.SetBasePath(Directory.GetCurrentDirectory())
                .AddJsonFile("appsettings.json", optional: false, reloadOnChange: true)
                //.AddJsonFile($"appsettings.{Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT")}.json", optional: true)
                .AddEnvironmentVariables();

            IConfigurationRoot config = builder.Build();
            //var sections = config.GetSection("ConnectionStrings"); //.GetChildren().ToList();
            //var test = config.Providers;


            var test = config.GetConnectionString("DatabaseConnection");
            //var connectionString =
            //    $"Data Source={sections[1].Value};" +
            //    $"Initial Catalog={sections[0].Value};" +
            //    $"Integrated Security={sections[2].Value}";


            return "connectionString";
        }

        /// <summary>
        /// Get connection string based on environment variable OED_ENVIRONMENT
        /// </summary>
        /// <returns>Connection string or a runtime exception if OED_ENVIRONMENT is not set</returns>
        private static string GetConnectionString()
        {
            var environment = Environment.GetEnvironmentVariable("OED_ENVIRONMENT");
            
            IConfigurationRoot configuration = new ConfigurationBuilder()
                .AddJsonFile("appsettings.json", optional: false)
                .AddJsonFile($"appsettings.{environment}.json", optional: false)
                .Build();

            return configuration.GetConnectionString("DefaultConnection");
        }
        
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Categories>(entity =>
            {
                entity.HasKey(e => e.CategoryId);

                entity.Property(e => e.CategoryId)
                    .HasColumnName("CategoryID")
                    .HasComment("Primary key");

                entity.Property(e => e.CategoryName)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.Description).HasColumnType("ntext");

                entity.Property(e => e.Picture).HasColumnType("image");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}